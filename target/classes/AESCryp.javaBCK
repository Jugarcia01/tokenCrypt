/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package co.com.claro.tokencrypt.web.controlServlets;

import java.io.*;
import java.security.*;
import javax.crypto.Cipher;
import javax.crypto.spec.*;
import org.jfree.util.Log;
import com.loopj.android.http.Base64;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;

public class AESCryp {

    private static final String TAG = "AESCrypt";
    private static final String CIPHER_TRANSF = "AES";
//    private static final String CIPHER_TRANSF = "AES/ECB/ZeroBytePadding";
    private static final String CHARSET = "UTF-8";//
    public static boolean DEBUG_LOG_ENABLED = false;

    private static SecretKeySpec generateKey(final String password) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        //byte[] key = new byte[]{your key in byte here (byte) a, (byte) f , ..... };

        // decode the base64 encoded string byte[] decodedKey = Base64.getDecoder().decode(encodedKey); 
        // rebuild key using SecretKeySpec SecretKey originalKey = new SecretKeySpec(decodedKey, 0, decodedKey.length, "AES");
        // byte[] key = new byte[]{(byte) 1, (byte) 2};

//        final byte[] key = java.util.Base64.getDecoder().decode(password);
//        final int keysize = key.length * Byte.SIZE;
        byte[] key = new byte[]{};
        int keysize = 0;
        
        MessageDigest sha = null;        
        try {
            sha = MessageDigest.getInstance("SHA-1");
            key = password.getBytes();
            key = sha.digest(key);
            key = Arrays.copyOf(key, 16);
            System.out.println("key: "+ key);
            keysize = key.length* Byte.SIZE;
            System.out.println("keysize: "+ keysize);
            key = Arrays.copyOf(key, keysize);
         }      
        catch (NoSuchAlgorithmException e){
            e.printStackTrace();
        }
        
        
        // this should be checked by a SecretKeyFactory, but that doesn't exist for AES 
        switch (keysize) {
            case 128:
            case 192:
            case 256:
                break;
            default:
                throw new IllegalArgumentException("Invalid key size for AES: " + keysize);
        }

        if (Cipher.getMaxAllowedKeyLength("AES") < keysize) { // this may be an issue if unlimited crypto is not installed 
            throw new IllegalArgumentException("Key size of " + keysize + " not supported in this runtime");
        } // throws IllegalArgumentException - if key is empty 

        SecretKeySpec secretKeySpec = new SecretKeySpec(key, "AES");
        return secretKeySpec;
    }

    /**
     * Encrypt and encode message using 256-bit AES with key generated from
     * password.
     *
     *
     * @param password used to generated key
     * @param message the thing you want to encrypt assumed String UTF-8
     * @return Base64 encoded CipherText
     * @throws GeneralSecurityException if problems occur during encryption
     */
    public static String encrypt(String message, final String password)
            throws GeneralSecurityException {
        try {
//            final SecretKeySpec key = generateKey(password);
//            log("message", message);
//            Cipher cipher = Cipher.getInstance(CIPHER_TRANSF);
//            byte[] ivBytes = cipher.getParameters().getParameterSpec(IvParameterSpec.class).getIV();
//            byte[] cipherText = encrypt(message.getBytes(CHARSET), key, ivBytes);
              
              Cipher cipher = Cipher.getInstance(CIPHER_TRANSF);              
              final SecretKeySpec skey = generateKey(password);
              byte[] key = skey.getEncoded();
              SecretKeySpec skeySpec = new SecretKeySpec(key, "AES");
              byte[] ivBytes = cipher.getParameters().getParameterSpec(IvParameterSpec.class).getIV();
              byte[] cipherText = encrypt(message.getBytes(CHARSET), skey, ivBytes);
              
            //NO_WRAP is important as was getting \n at the end
            String encoded;
            encoded = String.valueOf(Base64.encodeToString(cipherText, Base64.DEFAULT));
            log("Base64.NO_WRAP", encoded);
            return encoded;
        } catch (UnsupportedEncodingException e) {
            if (DEBUG_LOG_ENABLED) {
                Log.error("UnsupportedEncodingException ", e);
            }
            throw new GeneralSecurityException(e);
        }
    }

    /**
     * More flexible AES encrypt that doesn't encode
     *
     * @param key AES key typically 128, 192 or 256 bit
     * @param iv Initiation Vector
     * @param message in bytes (assumed it's already been decoded)
     * @return Encrypted cipher text (not encoded)
     * @throws GeneralSecurityException if something goes wrong during
     * encryption
     */
    public static byte[] encrypt(final byte[] message, final SecretKeySpec key, final byte[] iv)
            throws GeneralSecurityException {
        
        final Cipher cipher = Cipher.getInstance(CIPHER_TRANSF);
        IvParameterSpec ivSpec = new IvParameterSpec(iv);
        
        cipher.init(Cipher.ENCRYPT_MODE, key);//, ivSpec
        byte[] cipherText = cipher.doFinal(message);
        log("cipherText", cipherText);
        return cipherText;
    }

    /**
     * Decrypt and decode ciphertext using 256-bit AES with key generated from
     * password
     *
     * @param password used to generated key
     * @param base64EncodedCipherText the encrpyted message encoded with base64
     * @return message in Plain text (String UTF-8)
     * @throws GeneralSecurityException if there's an issue decrypting
     */
    public static String decrypt(String base64EncodedCipherText, final String password)
            throws GeneralSecurityException {

        try {
            final SecretKeySpec key = generateKey(password);
            log("base64EncodedCipherText", base64EncodedCipherText);
            byte[] decodedCipherText = Base64.decode(base64EncodedCipherText, Base64.DEFAULT);
            log("decodedCipherText", decodedCipherText);

            Cipher cipher = Cipher.getInstance(CIPHER_TRANSF);
            byte[] ivBytes = cipher.getParameters().getParameterSpec(IvParameterSpec.class).getIV();
            byte[] decryptedBytes = decrypt(decodedCipherText, key, ivBytes);
            log("decryptedBytes", decryptedBytes);
            String message = new String(decryptedBytes, CHARSET);
            log("message", message);
            return message;
        } catch (UnsupportedEncodingException e) {
            if (DEBUG_LOG_ENABLED) {
                Log.error("UnsupportedEncodingException ", e);
            }
            throw new GeneralSecurityException(e);
        }
    }

    /**
     * More flexible AES decrypt that doesn't encode
     *
     * @param key AES key typically 128, 192 or 256 bit
     * @param iv Initiation Vector
     * @param decodedCipherText in bytes (assumed it's already been decoded)
     * @return Decrypted message cipher text (not encoded)
     * @throws GeneralSecurityException if something goes wrong during
     * encryption
     */
    public static byte[] decrypt(final byte[] decodedCipherText, final SecretKeySpec key, final byte[] iv)
            throws GeneralSecurityException {
        final Cipher cipher = Cipher.getInstance(CIPHER_TRANSF);
        IvParameterSpec ivSpec = new IvParameterSpec(iv);
        cipher.init(Cipher.DECRYPT_MODE, key);//, ivSpec
        byte[] decryptedBytes = cipher.doFinal(decodedCipherText);
        log("decryptedBytes", decryptedBytes);
        return decryptedBytes;
    }

    private static void log(String what, byte[] bytes) {
        if (DEBUG_LOG_ENABLED) {
            //Log.d(TAG, what + "[" + bytes.length + "] [" + bytesToHex(bytes) + "]");
            Log.info(what + "[" + bytes.length + "] [" + bytesToHex(bytes) + "]");
        }
    }

    private static void log(String what, String value) {
        if (DEBUG_LOG_ENABLED) {
            //Log.d(TAG, what + "[" + value.length() + "] [" + value + "]");
            Log.info(what + "[" + value.length() + "] [" + value + "]");
        }

    }

    /**
     * Converts byte array to hexidecimal useful for logging and fault finding
     *
     * @param bytes
     * @return
     */
    private static String bytesToHex(byte[] bytes) {
        final char[] hexArray = {'0', '1', '2', '3', '4', '5', '6', '7', '8',
            '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        char[] hexChars = new char[bytes.length * 2];
        int v;
        for (int j = 0; j < bytes.length; j++) {
            v = bytes[j] & 0xFF;
            hexChars[j * 2] = hexArray[v >>> 4];
            hexChars[j * 2 + 1] = hexArray[v & 0x0F];
        }
        return new String(hexChars);
    }

    private AESCryp() {
    }
}
