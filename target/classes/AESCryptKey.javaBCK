package co.com.claro.tokencrypt.web.controlServlets;

import java.security.InvalidParameterException;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;


public class AESCryptKey {
    public static SecretKey generateAESKey(int keysize) throws InvalidParameterException {
        try {
            if (Cipher.getMaxAllowedKeyLength("AES") < keysize) {
                // this may be an issue if unlimited crypto is not installed 
                throw new InvalidParameterException("Key size of " + keysize + " not supported in this runtime");
            }
            final KeyGenerator keyGen = KeyGenerator.getInstance("AES");
            keyGen.init(keysize);
            return keyGen.generateKey();
        } catch (final NoSuchAlgorithmException e) {
            // AES functionality is a requirement for any Java SE runtime 
            throw new IllegalStateException("AES should always be present in a Java SE runtime", e);
        }
    }

    public static SecretKey decodeBase64ToAESKey(final String encodedKey) throws IllegalArgumentException {
        try {
            // throws IllegalArgumentException - if src is not in valid Base64 // scheme 
            final byte[] keyData = Base64.getDecoder().decode(encodedKey);
            final int keysize = keyData.length * Byte.SIZE;
            // this should be checked by a SecretKeyFactory, but that doesn't exist for AES 
            switch (keysize) {
                case 128:
                case 192:
                case 256:
                    break;
                default:
                    throw new IllegalArgumentException("Invalid key size for AES: " + keysize);
            }

            if (Cipher.getMaxAllowedKeyLength("AES") < keysize) { // this may be an issue if unlimited crypto is not installed 
                throw new IllegalArgumentException("Key size of " + keysize + " not supported in this runtime");
            } // throws IllegalArgumentException - if key is empty 
            final SecretKeySpec aesKey = new SecretKeySpec(keyData, "AES");
            return aesKey;
        } catch (final NoSuchAlgorithmException e) { // AES functionality is a requirement for any Java SE runtime 
            throw new IllegalStateException("AES should always be present in a Java SE runtime", e);
        }
    }

    public static String encodeAESKeyToBase64(final SecretKey aesKey) throws IllegalArgumentException {
        if (!aesKey.getAlgorithm().equalsIgnoreCase("AES")) {
            throw new IllegalArgumentException("Not an AES key");
        }
        final byte[] keyData = aesKey.getEncoded();
        final String encodedKey = Base64.getEncoder().encodeToString(keyData);
        return encodedKey;
    }

}
