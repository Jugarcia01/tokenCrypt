package co.com.claro.tokencrypt.web.controlServlets;

import java.security.GeneralSecurityException;
import java.util.Arrays;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;

/**
 *
 * @author Julian Garcia Ortiz
 */
public class testCrypt {

    // Main de Prueba
    public static void main(String[] args) throws GeneralSecurityException, Exception {
//        String secretKey = "MICLAROA20200928";
        String originalString = "serial=10:C2:5A:28:70:C2&activityId=17175617&idUser=ECM3403C";
        //        String secretKey = "ssshhhhhhhhhhh!!!!";
        //        String originalString = "howtodoinjava.com";

        ////////
        //        String encryptedString = AES.encrypt(originalString, secretKey);
        ////        encryptedString = "hqEF574kOZvsfQJnxZuzeVOkMzA0ZlQBBOnukBdEfuUOjnB1nkdOOz35lVrPyGxRNL01GWEKmi6sDgxu0hIMpg==";
        //        String decryptedString = AES.decrypt(encryptedString, secretKey);
        //        System.out.println("Este es el mensaje cifrado:");
        //        System.out.println(encryptedString);
        //
        //        System.out.println("Aqui esta el mensaje descifrado:");
        //        System.out.println(decryptedString);        

        ////////
        //        String encryptedString2 = AES2.encrypt(originalString, secretKey);
        ////        encryptedString2 = "hqEF574kOZvsfQJnxZuzeVOkMzA0ZlQBBOnukBdEfuUOjnB1nkdOOz35lVrPyGxRNL01GWEKmi6sDgxu0hIMpg==";
        //        String decryptedString2 = AES2.decrypt(encryptedString2, secretKey);
        //
        //        System.out.println("Este es el mensaje cifrado:");
        //        System.out.println(encryptedString2);
        //
        //        System.out.println("Aqui esta el mensaje descifrado:");
        //        System.out.println(decryptedString2);

        byte[] data = originalString.getBytes();

        KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
        keyGenerator.init(128); // 192 and 256 bits may not be available

        SecretKey secretKey;
        secretKey = keyGenerator.generateKey();

        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");

        // By initializing the cipher in CBC mode, an "initialization vector" has been randomly
        // generated. This initialization vector will be necessary to decrypt the encrypted data.
        // It is safe to store the initialization vector in plain text for later use. You can obtain
        // it's bytes by calling iv.getIV().
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);
        IvParameterSpec iv = cipher.getParameters().getParameterSpec(IvParameterSpec.class);
        byte[] encryptedData = cipher.doFinal(data);
        System.out.println(Arrays.toString(encryptedData));

        // When decrypting the encrypted data, you must provide the initialization vector used
        // during the encryption phase.
        cipher.init(Cipher.DECRYPT_MODE, secretKey, iv);
        byte[] decryptedData = cipher.doFinal(encryptedData);
        System.out.println(Arrays.toString(decryptedData));

        if (!Arrays.equals(data, decryptedData)) {
            throw new Exception("ERROR: Data can't decrypted!");
        }
    }
}
