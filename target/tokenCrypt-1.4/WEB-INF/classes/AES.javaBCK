package co.com.claro.tokencrypt.web.controlServlets;

import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;


public class AES {

    private static SecretKeySpec secretKey;
    private static byte[] key;
//    private static final String CIPHER_TRANSF = "AES";
    private static final String CIPHER_TRANSF = "AES/ECB/PKCS5PADDING";

    
    public static void setKey(String myKey)
    {
        MessageDigest sha = null;        
        try{
            key = myKey.getBytes("UTF-8");
            sha = MessageDigest.getInstance("SHA-1");
            key = sha.digest(key);
            //key = Arrays.copyOf(key, 16);
            key = Arrays.copyOf(key, 16);
            secretKey = new SecretKeySpec(key, "AES");
        }
        catch (NoSuchAlgorithmException e){
            e.printStackTrace();
        }
        catch (UnsupportedEncodingException ex) {
            Logger.getLogger(AES.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public static String encrypt(String strToEncrypt, String secret)
    {
        try{
            setKey(secret);
            Cipher cipher = Cipher.getInstance(CIPHER_TRANSF);
            cipher.init(Cipher.ENCRYPT_MODE, secretKey);
            return Base64.getEncoder().encodeToString(cipher.doFinal(strToEncrypt.getBytes("UTF-8")));
            
        }
        catch (Exception e){
            System.out.println("Error mientras se encriptaban datos" + e.toString());
        }
        return null;
    }
    
    public static String decrypt(String strToDecrypt, String secret)
    {
        try
        {
            setKey(secret);
            Cipher cipher = Cipher.getInstance(CIPHER_TRANSF);
            cipher.init(Cipher.DECRYPT_MODE, secretKey);
            return new String(cipher.doFinal(Base64.getDecoder().decode(strToDecrypt)));
        }
        catch (Exception e)
        {
            System.out.println("Error mientras se desencriptaban datos" + e.toString());
        }
        return null;
    }
    
}

